package com.example.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.greendao.ZI_TeachData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZI__TEACH_DATA".
*/
public class ZI_TeachDataDao extends AbstractDao<ZI_TeachData, Long> {

    public static final String TABLENAME = "ZI__TEACH_DATA";

    /**
     * Properties of entity ZI_TeachData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SchoolName = new Property(1, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property Degree = new Property(2, String.class, "degree", false, "DEGREE");
        public final static Property Manager = new Property(3, String.class, "manager", false, "MANAGER");
        public final static Property StartTime = new Property(4, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "END_TIME");
        public final static Property Grade = new Property(6, String.class, "grade", false, "GRADE");
    };


    public ZI_TeachDataDao(DaoConfig config) {
        super(config);
    }
    
    public ZI_TeachDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZI__TEACH_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SCHOOL_NAME\" TEXT NOT NULL ," + // 1: schoolName
                "\"DEGREE\" TEXT NOT NULL ," + // 2: degree
                "\"MANAGER\" TEXT NOT NULL ," + // 3: manager
                "\"START_TIME\" TEXT NOT NULL ," + // 4: startTime
                "\"END_TIME\" TEXT NOT NULL ," + // 5: endTime
                "\"GRADE\" TEXT NOT NULL );"); // 6: grade
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZI__TEACH_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ZI_TeachData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSchoolName());
        stmt.bindString(3, entity.getDegree());
        stmt.bindString(4, entity.getManager());
        stmt.bindString(5, entity.getStartTime());
        stmt.bindString(6, entity.getEndTime());
        stmt.bindString(7, entity.getGrade());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ZI_TeachData readEntity(Cursor cursor, int offset) {
        ZI_TeachData entity = new ZI_TeachData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // schoolName
            cursor.getString(offset + 2), // degree
            cursor.getString(offset + 3), // manager
            cursor.getString(offset + 4), // startTime
            cursor.getString(offset + 5), // endTime
            cursor.getString(offset + 6) // grade
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ZI_TeachData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSchoolName(cursor.getString(offset + 1));
        entity.setDegree(cursor.getString(offset + 2));
        entity.setManager(cursor.getString(offset + 3));
        entity.setStartTime(cursor.getString(offset + 4));
        entity.setEndTime(cursor.getString(offset + 5));
        entity.setGrade(cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ZI_TeachData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ZI_TeachData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
